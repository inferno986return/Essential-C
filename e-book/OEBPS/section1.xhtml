<?xml version="1.0" encoding="UTF-8" standalone="no" ?><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta content="http://www.w3.org/1999/xhtml; charset=utf-8" http-equiv="Content-Type"/>
<link href="styles/zstylesheet.css" rel="stylesheet" type="text/css"/>
<title>Section 1 - Basic Types and Operators</title>
</head>

<body>
	<h2 class="heading">Section 1<br/>Basic Types and Operators</h2>
	<hr class="black-line"/>
	
	<p class="noindent top">C provides a standard, minimal set of basic data types. Sometimes these are called "primitive" types. More complex data structures can be built up from these basic types.</p>

	<h1 class="subheading">Integer Types</h1>
	<p class="noindent">The "integral" types in C form a family of integer types. They all behave like integers and can be mixed together and used in similar ways. The differences are due to the different number of bits ("widths") used to implement each type -- the wider types can store a greater ranges of values.</p>

	<p class="top"><span class="mono">char</span> ASCII character -- at least 8 bits. Pronounced "car". As a practical matter char is basically always a byte which is 8 bits which is enough to store a single ASCII character. 8 bits provides a signed range of -128..127 or an unsigned range is 0..255. <span class="mono">char</span> is also required to be the "smallest addressable unit" for the machine -- each byte in memory has its own address.</p>
	
	<p class="top"><span class="mono">short</span> Small integer -- at least 16 bits which provides a signed range of -32768..32767. Typical size is 16 bits. Not used so much.</p>

	<p class="top"><span class="mono">int</span> Default integer -- at least 16 bits, with 32 bits being typical. Defined to be the "most comfortable" size for the computer. If you do not really care about the range for an integer variable, declare it int since that is likely to be an appropriate size (16 or 32 bit) which works well for that machine.</p>

	<p class="top"><span class="mono">long</span> Large integer -- at least 32 bits. Typical size is 32 bits which gives a signed range of about -2 billion ..+2 billion. Some compilers support "long long" for 64 bit ints.</p>

	<p class="noindent top">The integer types can be preceded by the qualifier unsigned which disallows representing negative numbers, but doubles the largest positive number representable. For example, a 16 bit implementation of short can store numbers in the range -32768..32767, while unsigned short can store 0..65535. You can think of pointers as being a form of unsigned long on a machine with 4 byte pointers. In my opinion, it's best to avoid using unsigned unless you really need to. It tends to cause more misunderstandings and problems than it is worth.</p>

	<p class="top"><span class="mono">(1.0/3.0 + 1.0/3.0 + 1.0/3.0)&#160;&#160;// is this equal to 1.0 exactly?</span></p>

</body>
</html>
