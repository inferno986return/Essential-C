<?xml version="1.0" encoding="UTF-8" standalone="no" ?><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta content="http://www.w3.org/1999/xhtml; charset=utf-8" http-equiv="Content-Type"/>
<link href="styles/zstylesheet.css" rel="stylesheet" type="text/css"/>
<title>Section 2 - Control Structures</title>
</head>

<body>
	<h2 class="heading">Section 2<br/>Control Structures</h2>
	<hr class="black-line"/>

	<h1 class="subheading">Curly Braces {}</h1>
	<p class="noindent">C uses curly braces ({}) to group multiple statements together. The statements execute in order. Some languages let you declare variables on any line (C++). Other languages insist that variables are declared only at the beginning of functions (Pascal). C takes the middle road – variables may be declared within the body of a function, but they must follow a '{'. More modern languages like Java and C++ allow you to declare variables on any line, which is handy.</p>

	<h1 class="subheading">If Statement</h1>
	<p class="noindent">Both an if and an if-else are available in C. The <i>&lt;expression&gt;</i> can be any valid expression. The parentheses around the expression are required, even if it is just a single variable.</p>

	<p class="noindent top mono">if (&lt;expression&gt;) &lt;statement&gt;&#160;&#160;// simple form with no {}'s or else clause</p>

	<p class="noindent top mono">if (&lt;expression&gt;) {&#160;&#160;&#160;// simple form with {}'s to group statements</p>
	<p class="noindent mono">&#160;&#160;&#160;&lt;statement&gt;</p>
	<p class="noindent mono">&#160;&#160;&#160;&lt;statement&gt;</p>
	<p class="noindent mono">}</p>

	<p class="noindent top mono">if (&lt;expression&gt;) {&#160;&#160;&#160;// full then/else form</p>
	<p class="noindent mono">&#160;&#160;&#160;&lt;statement&gt;</p>
	<p class="noindent mono">}</p>
	<p class="noindent mono">else {</p>
	<p class="noindent mono">&#160;&#160;&#160;&lt;statement&gt;</p>
	<p class="noindent mono">}</p>

	<h1 class="subheading">Conditional Expression -or- The Ternary Operator</h1>
	<p class="noindent">The conditional expression can be used as a shorthand for some if-else statements. The general syntax of the conditional operator is:</p>

	<p class="noindent top mono">&lt;expression1&gt; ? &lt;expression2&gt; : &lt;expression3&gt;</p>

	<p class="noindent top">This is an expression, not a statement, so it represents a value. The operator works by evaluating expression1. If it is true (non-zero), it evaluates and returns expression2. Otherwise, it evaluates and returns expression3.</p>
	<p>The classic example of the ternary operator is to return the smaller of two variables. Every once in a while, the following form is just what you needed. Instead of...</p>

	<p class="noindent top mono">if (x &lt; y) {</p>
	<p class="noindent mono">&#160;&#160;&#160;min = x;</p>
	<p class="noindent mono">}</p>
	<p class="noindent mono">else {</p>
	<p class="noindent mono">&#160;&#160;&#160;min = y;</p>
	<p class="noindent mono">}</p>

	<p class="noindent top">You just say...</p>

	<p class="noindent top mono">min = (x &lt; y) ? x : y;</p>

	<h1 class="subheading">Switch Statement</h1>
	<p class="noindent">The <span class="mono">switch</span> statement is a sort of specialized form of <span class="mono">if</span> used to efficiently separate different blocks of code based on the value of an integer. The switch expression is evaluated, and then the flow of control jumps to the matching const-expression case. The case expressions are typically int or char constants. The <span class="mono">switch</span> statement is probably the single most syntactically awkward and error-prone features of the C language.</p>
<!--
switch (&lt;expression&gt;) {
case &lt;const-expression-1&gt;:
&lt;statement&gt;
break;
case &lt;const-expression-2&gt;:
&lt;statement&gt;
break;
case &lt;const-expression-3&gt;:
case &lt;const-expression-4&gt;:
&lt;statement&gt;
break;

// here we combine case 3 and 4

default:
// optional
&lt;statement&gt;
}

Each constant needs its own case keyword and a trailing colon (:). Once execution has
jumped to a particular case, the program will keep running through all the cases from that
point down – this so called "fall through" operation is used in the above example so that
expression-3 and expression-4 run the same statements. The explicit break statements
are necessary to exit the switch. Omitting the break statements is a common error – it
compiles, but leads to inadvertent fall-through behavior.
Why does the switch statement fall-through behavior work the way it does? The best
explanation I can think of is that originally C was developed for an audience of assembly
language programmers. The assembly language programmers were used to the idea of a
jump table with fall-through behavior, so that's the way C does it (it's also relatively easy
to implement it this way.) Unfortunately, the audience for C is now quite different, and
the fall-through behavior is widely regarded as a terrible part of the language.
While Loop
The while loop evaluates the test expression before every loop, so it can execute zero
times if the condition is initially false. It requires the parenthesis like the if.
while (&lt;expression&gt;) {
&lt;statement&gt;
}

Do-While Loop
Like a while, but with the test condition at the bottom of the loop. The loop body will
always execute at least once. The do-while is an unpopular area of the language, most
everyone tries to use the straight while if at all possible.
do {
&lt;statement&gt;
} while (&lt;expression&gt;)

For Loop
The for loop in C is the most general looping construct. The loop header contains three
parts: an initialization, a continuation condition, and an action.
for (<initialization>; <continuation>; <action>) {
&lt;statement&gt;
}

The initialization is executed once before the body of the loop is entered. The loop
continues to run as long as the continuation condition remains true (like a while). After
every execution of the loop, the action is executed. The following example executes 10
times by counting 0..9. Many loops look very much like the following...
for (i = 0; i < 10; i++) {
&lt;statement&gt;
}

C programs often have series of the form 0..(some_number-1). It's idiomatic in C for the
above type loop to start at 0 and use < in the test so the series runs up to but not equal to
the upper bound. In other languages you might start at 1 and use <= in the test.
Each of the three parts of the for loop can be made up of multiple expressions separated
by commas. Expressions separated by commas are executed in order, left to right, and
represent the value of the last expression. (See the string-reverse example below for a
demonstration of a complex for loop.)
Break
The break statement will move control outside a loop or switch statement. Stylistically
speaking, break has the potential to be a bit vulgar. It's preferable to use a straight
while with a single test at the top if possible. Sometimes you are forced to use a break
because the test can occur only somewhere in the midst of the statements in the loop
body. To keep the code readable, be sure to make the break obvious – forgetting to
account for the action of a break is a traditional source of bugs in loop behavior.
while (&lt;expression&gt;) {
&lt;statement&gt;
&lt;statement&gt;
if (<condition which can only be evaluated here>)
break;
&lt;statement&gt;
&lt;statement&gt;
}
// control jumps down here on the break

The break does not work with if. It only works in loops and switches. Thinking that a
break refers to an if when it really refers to the enclosing while has created some high
quality bugs. When using a break, it's nice to write the enclosing loop to iterate in the
most straightforward, obvious, normal way, and then use the break to explicitly catch
the exceptional, weird cases.
Continue
The continue statement causes control to jump to the bottom of the loop, effectively
skipping over any code below the continue. As with break, this has a reputation as
being vulgar, so use it sparingly. You can almost always get the effect more clearly using
an if inside your loop.
while (&lt;expression&gt;) {
...
if (<condition>)
continue;
...
...
// control jumps here on the continue
}
-->

</body>
</html>
